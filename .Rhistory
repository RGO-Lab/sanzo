con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
library("mongolite")
install.packages(c("RSQLite", "sofa", "etseed", "elastic", "mongolite", "redux", "reshape2", "dplyr", "DBI", "RMongo"))
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
library("mongolite")
library("RSQLite") # Used to connect to SQLite database
library("RMongo")
library("mongolite")
library("RSQLite") # Used to connect to SQLite database
library("DBI")
library("dplyr")
library("reshape2")
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
View(con)
if(con$count() > 0) con$drop()
con$insert(mtcars)
stopifnot(con$count() == nrow(mtcars))
con$insert(mtcars)
mydata <- con$find()
m <- mongo(collection = "nycflights")
m <- ""
m$insert(mtcars)
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
con$insert(cars)
cars <- con$insert(cars)
View(cars)
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
con <- con$insert(cars)
cars
cars$nInserted
View(cars)
cars$nInserted
cars$nMatched
mongo_data$distinct("carrier")
View(mydata)
x <- dbGetQuery(con,"select * from mpg")
m <- mongo(collection="flightfact_mongodb",db="nycflights13")
x <- dbGetQuery(mtcars ,"select * from mpg")
head(mtcars)
test <- mongo()
mongo.collection <- mongo(collection = "HouseData")
mongo.collection$insert(mydata)
mongo.collection <- mongo(collection = "HouseData")
mongo.collection$insert(mtcars)
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
cars <- con$insert(cars)
cars <- con$insert(cars)
mongo_data <- mongo(collection = "mydata")
mongo_data <- mongo(collection = mydata)
library(nycflights13)
mongo_data <- mongo(collection = nycflights)
mongo_data <- mongo(collection = mydata)
mongo.collection <- mongo(collection = "HouseData")
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
cars <- con$insert(cars)
con$insert(cars)
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
cars <- con$insert(cars)
if(con$count() > 0) con$drop()
con$insert(mtcars)
stopifnot(con$count() == nrow(mtcars))
mydata <- con$find()
mt_cars_mongo <- con$find()
stopifnot(all.equal(mydata, mtcars))
con$drop()
View(mydata)
View(mt_cars_mongo)
stopifnot(all.equal(mydata, mtcars))
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
con
head(con)
#Display the data as it was read
cars
cars <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
cars
cars <- cars$insert(cars)
cars_mongo <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
#Display the data as it was read
cars_mongo
cars <- cars_mongo$insert(cars)
if(cars$count() > 0) con$drop()
#Create a data frame from the mongo lite data of mtcars
mt_cars_mongo <- cars$find()
if(cars$count() > 0) con$drop()
if(cars$count() > 0) cars$drop()
cars <- cars_mongo$insert(cars)
cars_mongo <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
#Display the data as it was read
cars_mongo
cars <- cars_mongo$insert(cars)
if(cars$count() > 0) cars$drop()
cars$insert(mtcars)
stopifnot(cars$count() == nrow(mtcars))
cars <- cars_mongo$insert(cars)
cars_mongo <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
#Display the data as it was read
cars_mongo
cars <- cars_mongo$insert(cars)
if(cars$count() > 0) cars$drop()
mt_cars_mongo <- cars$find()
cars_mongo <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
if(cars$count() > 0) cars$drop()
#Display the data as it was read
cars_mongo
#Create a data frame from the mongo lite data of mtcars
mt_cars_mongo <- cars$find()
# Connect to demo server
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test") if(con$count() > 0) con$drop()
# Connect to demo server
con <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
if(con$count() > 0) con$drop()
con$insert(mtcars)
stopifnot(con$count() == nrow(mtcars))
# Query data
mydata <- con$find()
stopifnot(all.equal(mydata, mtcars))
con$drop()
# Connect to demo server
cardata <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
if(cardata$count() > 0) cardata$drop()
cardata$insert(mtcars)
stopifnot(cardata$count() == nrow(mtcars))
# Query data
mydata <- cardata$find()
stopifnot(all.equal(mydata, mtcars))
cardata$drop()
cardata
head(mydata)
install.packages("ggthemes", repos = "http://cran.cnr.berkeley.edu")
install.packages("ggthemes", repos = "http://cran.cnr.berkeley.edu")
install.packages("ggthemes")
library(rlang)
library(purrr)
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
#### DEV SANZO ####
# Load packages for package dev.
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
library(rlang)
library(purrr)
#install.packages(c("rlang", "purrr"))
#install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::create("myfirstpackage")
devtools::create("sanzo")
install.packages("lodown")
library("lodown")
library(sanzo)
ggplot(faithfuld, aes(waiting, eruptions)) +
geom_raster(aes(fill = density), interpolate = TRUE) +
scale_fill_gradientn(colors = sanzo.duo("c102"))
library(sanzo)
library(ggplot2)
ggplot(faithfuld, aes(waiting, eruptions)) +
geom_raster(aes(fill = density), interpolate = TRUE) +
scale_fill_gradientn(colors = sanzo.duo("c102"))
plot(iris$Sepal.Length, iris$Sepal.Width, col = sanzo.duo("c085"))
my_quad <- sanzo.quad("c252")
plot(iris$Sepal.Length, iris$Sepal.Width, col = my_quad)
ggplot(iris, aes(fill = Species, y = Sepal.Width, x = Sepal.Length)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = sanzo.duo("c103"))
ggplot(iris, aes(fill = Species, y = Sepal.Width, x = Sepal.Length)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = sanzo.trio("c223"))
?sanzo.info2()
?sanzo.trio()
names(trios)
usethis::use_build_ignore(c("dev")
)
usethis::use_build_ignore(c("/Users/razel/Desktop/PROGS/R_practice/sanzo/dev"))
setwd("/Users/razel/Desktop/PROGS/R_practice/sanzo/")
usethis::use_build_ignore(c("dev"))
devtools::check()
devtools::check()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
